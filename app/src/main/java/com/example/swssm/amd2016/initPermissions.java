package com.example.swssm.amd2016;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.util.Log;

import com.example.swssm.amd2016.database.DbOpenHelper;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static com.example.swssm.amd2016.permissionReader.hasPermission;

/**
 * Created by jinheon Kim on 2016-02-24.
 */
public class initPermissions {
    private static final String TAG = "INITPERMISSIONS";
    private Context mContext;
    private PackageManager pm;
    private List<ApplicationInfo> packages;
    private DbOpenHelper mDbOpenHelper;
    private ArrayList<String> mGroupList;
    private ArrayList<Drawable> mGroupIcon;
    private ArrayList<ArrayList<String>> mChildList;
    private ArrayList<String> mChildListP;
    private ArrayList<String> mChildListP1;
    private ArrayList<String> mChildListP2;
    private ArrayList<ArrayList<String>> mChildListPF;
    private ArrayList<String> temp;
    private Cursor cs;

    public initPermissions(Context c, DbOpenHelper db){
        mContext = c;
        pm = mContext.getPackageManager();
        mDbOpenHelper = db;
        mDbOpenHelper.open();
        setPermissions();
    }


    public void setArrayList(){
        mGroupIcon = new ArrayList<Drawable>();
        mGroupList = new ArrayList<String>();
        mChildList = new ArrayList<ArrayList<String>>();
        mChildListP = new ArrayList<String>();
        mChildListP1 = new ArrayList<String>();
        mChildListP2 = new ArrayList<String>();
        mChildListPF = new ArrayList<ArrayList<String>>();
        temp = new ArrayList<String>();

        mChildListP1.add("RESTART_PACKAGES");
        mChildListP1.add("WRITE_APN_SETTINGS");
        mChildListP1.add("WRITE_CONTACTS");
        mChildListP1.add("CHANGE_WIFI_STATE");
        mChildListP1.add("CALL_PHONE");
        mChildListP1.add("WAKE_LOCK");
        mChildListP1.add("ACCESS_FINE_LOCATION");
        mChildListP1.add("READ_CONTACTS");
        mChildListP1.add("ACCESS_COARSE_LOCATION");
        mChildListP1.add("VIBRATE");
        mChildListP1.add("RECEIVE_SMS");
        mChildListP1.add("SEND_SMS");
        mChildListP1.add("WRITE_SMS");
        mChildListP1.add("RECEIVE_BOOT_COMPLETED");
        mChildListP1.add("READ_SMS");
        mChildListP1.add("ACCESS_WIFI_STATE");
        mChildListP1.add("WRITE_EXTERNAL_STORAGE");
        mChildListP1.add("ACCESS_NETWORK_STATE");
        mChildListP1.add("READ_PHONE_STATE");
        mChildListP1.add("INTERNET");
        mChildListP1.add("ACCESS_FINE_LOCATION");
        mChildListP1.add("INSTALL_PACKAGES");
        mChildListP.add("first");

        mDbOpenHelper.open();

        packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);

        for (ApplicationInfo packageInfo : packages) {
            String permission = "";
            Intent intent = pm.getLaunchIntentForPackage(packageInfo.packageName);
            mChildListP2.clear();
            mChildListP.clear();
            if (intent != null) {
                mGroupList.add(packageInfo.packageName);
                try {
                    mGroupIcon.add(mContext.getPackageManager().getApplicationIcon(packageInfo.packageName));
                } catch (Exception e) {
                    mGroupIcon.add(mContext.getResources().getDrawable(R.drawable.ic_launcher));
                    e.printStackTrace();
                }

                cs = mDbOpenHelper.getMatchName(packageInfo.packageName);


                cs.moveToFirst();
                permission = cs.getString(1);


                for(int i=0;i<44;i+=2) {
                    mChildListP2.add(Character.toString(permission.charAt(i)));
                }
                mChildListP.add("first");
                for(int i=0;i<mChildListP1.size();i++){
                    mChildListP.add(mChildListP1.get(i) + "  " + mChildListP2.get(i));
                }
                temp = (ArrayList<String>)mChildListP.clone();

                mChildListPF.add(temp);

            }
        }

    }

    public ArrayList<ArrayList<String>> getmChildListPF(){
        return mChildListPF;
    }
    public ArrayList<String> getmGroupList(){
        return mGroupList;
    }
    public ArrayList<Drawable> getmGroupIcon(){
        return mGroupIcon;
    }
    public ArrayList<String> getmChildListP1(){
        return mChildListP1;
    }
    public ArrayList<String> getmChildListP2(){
        return mChildListP2;
    }
    public ArrayList<String> getmChildListP(){
        return mChildListP;
    }
    public List<ApplicationInfo> getPermissionList(){
        return packages;
    }
    public PackageManager getPM(){
        return pm;
    }

    public void setPermissions(){

        packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);

        String pWhether = "";
        mDbOpenHelper.open();
        int a;
        for (ApplicationInfo packageInfo : packages) {

            String boool = "";
            Intent intent = pm.getLaunchIntentForPackage(packageInfo.packageName);
            if (intent != null) {
                Boolean whether;

                whether = hasPermission(packageInfo.packageName, "android.permission.RESTART_PACKAGES", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WRITE_APN_SETTINGS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WRITE_CONTACTS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.CHANGE_WIFI_STATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.CALL_PHONE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WAKE_LOCK", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_FINE_LOCATION", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.READ_CONTACTS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_COARSE_LOCATION", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.VIBRATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.RECEIVE_SMS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.SEND_SMS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WRITE_SMS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.RECEIVE_BOOT_COMPLETED", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.READ_SMS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_WIFI_STATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WRITE_EXTERNAL_STORAGE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_NETWORK_STATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.READ_PHONE_STATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.INTERNET", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_FINE_LOCATION", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.INSTALL_PACKAGES", pm);
                boool += (whether) ? 1:0; boool += "\t";

                pWhether += boool;
                pWhether += "\t\t" + packageInfo.packageName + "\n";

                //인서트 구문. 처음 실행 시 데이터베이스를 생성.
                try {
                    mDbOpenHelper.insertColumn(packageInfo.packageName, boool, "sys", 2);
                }catch(Exception e){
                    Log.e(TAG, " " + e.getCause());
                }
            }
        }

        //퍼미션 리스트 텍스트 저장
        String path = "/sdcard/";
        String fileName = "permissionList.txt";

        File file = new File(path + fileName);
        FileOutputStream fos = null;

        try{
            fos = new FileOutputStream(file);
            fos.write((pWhether).getBytes());
            fos.close();
        }catch(IOException e){
            Log.e(TAG , " permission list text save failed " + e.getCause());
        }
    }


}
