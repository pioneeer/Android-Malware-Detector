package com.example.swssm.amd2016.database;


import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.HashMap;

/**
 * Created by jinheon Kim on 2016-01-22.
 */
public class DbOpenHelper {

    private static final String TAG = "DbOpenHelper";
    private static final String DATABASE_NAME = "addressbook.db";
    private static final int DATABASE_VERSION = 1;
    public static SQLiteDatabase mDB;
    private DatabaseHelper mDBHelper;
    private Context mCtx;

    private class DatabaseHelper extends SQLiteOpenHelper{

        // 생성자
        public DatabaseHelper(Context context, String name,
                              CursorFactory factory, int version) {
            super(context, name, factory, version);
        }

        // 최초 DB를 만들때 한번만 호출된다.
        @Override
        public void onCreate(SQLiteDatabase db) {
            db.execSQL(DataBases.CreateDB._CREATE);

        }

        // 버전이 업데이트 되었을 경우 DB를 다시 만들어 준다.
        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL("DROP TABLE IF EXISTS "+DataBases.CreateDB._TABLENAME);
            onCreate(db);
        }
    }

    public DbOpenHelper(Context context){
        this.mCtx = context;
    }

    public DbOpenHelper open() throws SQLException{
        mDBHelper = new DatabaseHelper(mCtx, DATABASE_NAME, null, DATABASE_VERSION);
        mDB = mDBHelper.getWritableDatabase();
        return this;
    }

    public void close(){
        mDB.close();
    }

    // Insert DB
    public long insertColumn(String app_pgkname, String permissions, String systemcall, int malware_risk){

        ContentValues values = new ContentValues();
        values.put(DataBases.CreateDB.APP_PKGNAME, app_pgkname);
        values.put(DataBases.CreateDB.PERMISSIONS, permissions);
        values.put(DataBases.CreateDB.SYSCALL, systemcall);
        values.put(DataBases.CreateDB.MALWARE_RISK, malware_risk);

        values.put(DataBases.CreateDB.ACCESS, "0");
        values.put(DataBases.CreateDB.BRK, "0");
        values.put(DataBases.CreateDB.CAPSET, "0");
        values.put(DataBases.CreateDB.CHMOD, "0");
        values.put(DataBases.CreateDB.CLOCK_GETTIME, "0");
        values.put(DataBases.CreateDB.CLONE, "0");
        values.put(DataBases.CreateDB.CLOSE, "0");
        values.put(DataBases.CreateDB.DUP, "0");
        values.put(DataBases.CreateDB.EPOLL_CREATE, "0");
        values.put(DataBases.CreateDB.EPOLL_CTL, "0");
        values.put(DataBases.CreateDB.EPOLL_WAIT, "0");
        values.put(DataBases.CreateDB.EXECVE, "0");
        values.put(DataBases.CreateDB.EXIT, "0");
        values.put(DataBases.CreateDB.EXIT_GROUP, "0");
        values.put(DataBases.CreateDB.FCNTL64, "0");
        values.put(DataBases.CreateDB.FLOCK, "0");
        values.put(DataBases.CreateDB.FORK, "0");
        values.put(DataBases.CreateDB.FDATASYNC, "0");
        values.put(DataBases.CreateDB.FSTAT64, "0");
        values.put(DataBases.CreateDB.FSYNC, "0");
        values.put(DataBases.CreateDB.FTRUNCATE, "0");
        values.put(DataBases.CreateDB.FUTEX, "0");
        values.put(DataBases.CreateDB.GETDENTS64, "0");
        values.put(DataBases.CreateDB.GETEGID32, "0");
        values.put(DataBases.CreateDB.GETEUID32, "0");
        values.put(DataBases.CreateDB.GETGID32, "0");
        values.put(DataBases.CreateDB.GETPGID, "0");
        values.put(DataBases.CreateDB.GETPID, "0");
        values.put(DataBases.CreateDB.GETPRIORITY, "0");
        values.put(DataBases.CreateDB.GETRLIMIT, "0");
        values.put(DataBases.CreateDB.GETTID, "0");
        values.put(DataBases.CreateDB.GETTIMEOFDAY, "0");
        values.put(DataBases.CreateDB.GETUID32, "0");
        values.put(DataBases.CreateDB.IOCTL, "0");
        values.put(DataBases.CreateDB.KILL, "0");
        values.put(DataBases.CreateDB.LSEEK, "0");
        values.put(DataBases.CreateDB.LSTAT64, "0");
        values.put(DataBases.CreateDB.MADVISE, "0");
        values.put(DataBases.CreateDB.MKDIR, "0");
        values.put(DataBases.CreateDB.MMAP2, "0");
        values.put(DataBases.CreateDB.MPROTECT, "0");
        values.put(DataBases.CreateDB.MUNMAP, "0");
        values.put(DataBases.CreateDB.NANOSLEEP, "0");
        values.put(DataBases.CreateDB.OPEN, "0");
        values.put(DataBases.CreateDB.PIPE, "0");
        values.put(DataBases.CreateDB.POLL, "0");
        values.put(DataBases.CreateDB.PREAD, "0");
        values.put(DataBases.CreateDB.READ, "0");
        values.put(DataBases.CreateDB.READLINK, "0");
        values.put(DataBases.CreateDB.RENAME, "0");
        values.put(DataBases.CreateDB.RESTART_SYSCALL, "0");
        values.put(DataBases.CreateDB.RT_SIGTIMEDWAIT, "0");
        values.put(DataBases.CreateDB.SCHED_YIELD, "0");
        values.put(DataBases.CreateDB.S_SELECT, "0");
        values.put(DataBases.CreateDB.SETGID32, "0");
        values.put(DataBases.CreateDB.SETGROUPS32, "0");
        values.put(DataBases.CreateDB.SETPGID, "0");
        values.put(DataBases.CreateDB.SETPRIORITY, "0");
        values.put(DataBases.CreateDB.SETRLIMIT, "0");
        values.put(DataBases.CreateDB.SETUID32, "0");
        values.put(DataBases.CreateDB.SIGACTION, "0");
        values.put(DataBases.CreateDB.SIGPROCMASK, "0");
        values.put(DataBases.CreateDB.SIGRETURN, "0");
        values.put(DataBases.CreateDB.STAT64, "0");
        values.put(DataBases.CreateDB.SYS_281, "0");
        values.put(DataBases.CreateDB.SYS_282, "0");
        values.put(DataBases.CreateDB.SYS_283, "0");
        values.put(DataBases.CreateDB.SYS_286, "0");
        values.put(DataBases.CreateDB.SYS_290, "0");
        values.put(DataBases.CreateDB.SYS_293, "0");
        values.put(DataBases.CreateDB.SYS_294, "0");
        values.put(DataBases.CreateDB.SYS_295, "0");
        values.put(DataBases.CreateDB.SYS_296, "0");
        values.put(DataBases.CreateDB.SYS_297, "0");
        values.put(DataBases.CreateDB.SYSCALL_983042, "0");
        values.put(DataBases.CreateDB.SYSCALL_983045, "0");
        values.put(DataBases.CreateDB.UNLINK, "0");
        values.put(DataBases.CreateDB.WAIT4, "0");
        values.put(DataBases.CreateDB.WTIRE, "0");

        values.put(DataBases.CreateDB.SUM, 0);

        return mDB.insert(DataBases.CreateDB._TABLENAME, null, values);
    }

    // Update DB
    public boolean updateColumn(String app_pgkname, String permissions, String systemcall, int malware_risk){
        ContentValues values = new ContentValues();
        values.put(DataBases.CreateDB.APP_PKGNAME, app_pgkname);
        values.put(DataBases.CreateDB.PERMISSIONS, permissions);
        values.put(DataBases.CreateDB.SYSCALL, systemcall);
        values.put(DataBases.CreateDB.MALWARE_RISK, malware_risk);

        return mDB.update(DataBases.CreateDB._TABLENAME, values, "pkg_name="+app_pgkname, null) > 0;
    }


    public boolean updateColumnSyscall(String app_pgkname, HashMap<String, Double> map, int sum){
        ContentValues values = new ContentValues();

        int a = sum;

        if(a == 0) a = 1;


        values.put(DataBases.CreateDB.ACCESS , map.get("access")/a);
        values.put(DataBases.CreateDB.BRK , map.get("brk")/a);
        values.put(DataBases.CreateDB.CAPSET , map.get("capset")/a);
        values.put(DataBases.CreateDB.CHMOD , map.get("chmod")/a);
        values.put(DataBases.CreateDB.CLOCK_GETTIME , map.get("clock_gettime")/a);
        values.put(DataBases.CreateDB.CLONE , map.get("clone")/a);
        values.put(DataBases.CreateDB.CLOSE , map.get("close")/a);
        values.put(DataBases.CreateDB.DUP , map.get("dup")/a);
        values.put(DataBases.CreateDB.EPOLL_CREATE , map.get("epoll_create")/a);
        values.put(DataBases.CreateDB.EPOLL_CTL , map.get("epoll_ctl")/a);
        values.put(DataBases.CreateDB.EPOLL_WAIT , map.get("epoll_wait")/a);
        values.put(DataBases.CreateDB.EXECVE , map.get("execve")/a);
        values.put(DataBases.CreateDB.EXIT , map.get("exit")/a);
        values.put(DataBases.CreateDB.EXIT_GROUP , map.get("exit_group")/a);
        values.put(DataBases.CreateDB.FCNTL64 , map.get("fcntl64")/a);
        values.put(DataBases.CreateDB.FLOCK , map.get("flock")/a);
        values.put(DataBases.CreateDB.FORK , map.get("fork")/a);
        values.put(DataBases.CreateDB.FDATASYNC , map.get("fdatasync")/a);
        values.put(DataBases.CreateDB.FSTAT64 , map.get("fstat64")/a);
        values.put(DataBases.CreateDB.FSYNC , map.get("fsync")/a);
        values.put(DataBases.CreateDB.FTRUNCATE , map.get("ftruncate")/a);
        values.put(DataBases.CreateDB.FUTEX , map.get("futex")/a);
        values.put(DataBases.CreateDB.GETDENTS64 , map.get("getdents64")/a);
        values.put(DataBases.CreateDB.GETEGID32 , map.get("getegid32")/a);
        values.put(DataBases.CreateDB.GETEUID32 , map.get("geteuid32")/a);
        values.put(DataBases.CreateDB.GETGID32 , map.get("getgid32")/a);
        values.put(DataBases.CreateDB.GETPGID , map.get("getpgid")/a);
        values.put(DataBases.CreateDB.GETPID , map.get("getpid")/a);
        values.put(DataBases.CreateDB.GETPRIORITY , map.get("getpriority")/a);
        values.put(DataBases.CreateDB.GETRLIMIT , map.get("getrlimit")/a);
        values.put(DataBases.CreateDB.GETTID , map.get("gettid")/a);
        values.put(DataBases.CreateDB.GETTIMEOFDAY , map.get("gettimeofday")/a);
        values.put(DataBases.CreateDB.GETUID32 , map.get("getuid32")/a);
        values.put(DataBases.CreateDB.IOCTL , map.get("ioctl")/a);
        values.put(DataBases.CreateDB.KILL , map.get("kill")/a);
        values.put(DataBases.CreateDB.LSEEK , map.get("lseek")/a);
        values.put(DataBases.CreateDB.LSTAT64 , map.get("lstat64")/a);
        values.put(DataBases.CreateDB.MADVISE , map.get("madvise")/a);
        values.put(DataBases.CreateDB.MKDIR , map.get("mkdir")/a);
        values.put(DataBases.CreateDB.MMAP2 , map.get("mmap2")/a);
        values.put(DataBases.CreateDB.MPROTECT , map.get("mprotect")/a);
        values.put(DataBases.CreateDB.MUNMAP , map.get("munmap")/a);
        values.put(DataBases.CreateDB.NANOSLEEP , map.get("nanosleep")/a);
        values.put(DataBases.CreateDB.OPEN , map.get("open")/a);
        values.put(DataBases.CreateDB.PIPE , map.get("pipe")/a);
        values.put(DataBases.CreateDB.POLL , map.get("poll")/a);
        values.put(DataBases.CreateDB.PREAD , map.get("pread")/a);
        values.put(DataBases.CreateDB.READ , map.get("read")/a);
        values.put(DataBases.CreateDB.READLINK , map.get("readlink")/a);
        values.put(DataBases.CreateDB.RENAME , map.get("rename")/a);
        values.put(DataBases.CreateDB.RESTART_SYSCALL, map.get("restart_syscall")/a);
        values.put(DataBases.CreateDB.RT_SIGTIMEDWAIT, map.get("rt_sigtimedwait")/a);
        values.put(DataBases.CreateDB.SCHED_YIELD , map.get("sched_yield")/a);
        values.put(DataBases.CreateDB.S_SELECT , map.get("select")/a);
        values.put(DataBases.CreateDB.SETGID32 , map.get("setgid32")/a);
        values.put(DataBases.CreateDB.SETGROUPS32 , map.get("setgroups32")/a);
        values.put(DataBases.CreateDB.SETPGID , map.get("setpgid")/a);
        values.put(DataBases.CreateDB.SETPRIORITY , map.get("setpriority")/a);
        values.put(DataBases.CreateDB.SETRLIMIT , map.get("setrlimit")/a);
        values.put(DataBases.CreateDB.SETUID32 , map.get("setuid32")/a);
        values.put(DataBases.CreateDB.SIGACTION , map.get("sigaction")/a);
        values.put(DataBases.CreateDB.SIGPROCMASK , map.get("sigprocmask")/a);
        values.put(DataBases.CreateDB.SIGRETURN , map.get("sigreturn")/a);
        values.put(DataBases.CreateDB.STAT64 , map.get("stat64")/a);
        values.put(DataBases.CreateDB.SYS_281 , map.get("SYS_281")/a);
        values.put(DataBases.CreateDB.SYS_282 , map.get("SYS_282")/a);
        values.put(DataBases.CreateDB.SYS_283 , map.get("SYS_283")/a);
        values.put(DataBases.CreateDB.SYS_286 , map.get("SYS_286")/a);
        values.put(DataBases.CreateDB.SYS_290 , map.get("SYS_290")/a);
        values.put(DataBases.CreateDB.SYS_293 , map.get("SYS_293")/a);
        values.put(DataBases.CreateDB.SYS_294 , map.get("SYS_294")/a);
        values.put(DataBases.CreateDB.SYS_295 , map.get("SYS_295")/a);
        values.put(DataBases.CreateDB.SYS_296 , map.get("SYS_296")/a);
        values.put(DataBases.CreateDB.SYS_297 , map.get("SYS_297")/a);
        values.put(DataBases.CreateDB.SYSCALL_983042 , map.get("syscall_983042")/a);
        values.put(DataBases.CreateDB.SYSCALL_983045 , map.get("syscall_983045")/a);
        values.put(DataBases.CreateDB.UNLINK , map.get("unlink")/a);
        values.put(DataBases.CreateDB.WAIT4 , map.get("wait4")/a);
        values.put(DataBases.CreateDB.WTIRE , map.get("write")/a);

        values.put(DataBases.CreateDB.SUM , sum);

        Log.i("syscallinput succ", "syscallinput succ" + "ssibal!!");
        return mDB.update(DataBases.CreateDB._TABLENAME, values, "pkg_name='"+app_pgkname+"'", null) > 0;
    }

    public boolean updateColumnMalrisk(String app_pgkname, int malware_risk){
        ContentValues values = new ContentValues();
        values.put(DataBases.CreateDB.MALWARE_RISK, malware_risk);

        return mDB.update(DataBases.CreateDB._TABLENAME, values, "pkg_name='"+app_pgkname+"'", null) > 0;
    }


    // Delete APP_PKGNAME
    public boolean deleteColumn(String app_pkgname){
        return mDB.delete(DataBases.CreateDB._TABLENAME, "APP_PKGNAME="+app_pkgname, null) > 0;
    }

    // Select All
    public Cursor getAllColumns(){
        return mDB.query(DataBases.CreateDB._TABLENAME, null, null, null, null, null, null);
    }

    // ID 컬럼 얻어 오기
    public Cursor getColumn(long id){
        Cursor c = mDB.query(DataBases.CreateDB._TABLENAME, null,
                "_id="+id, null, null, null, null);
        if(c != null && c.getCount() != 0)
            c.moveToFirst();
        return c;
    }

    // 이름 검색 하기 (rawQuery)
    public Cursor getMatchName(String name){
        Log.i("123123", "1231233333");
        Cursor c = mDB.rawQuery( "select * from appDB where pkg_name=" + "'" + name + "';" , null);

        return c;
    }
}
