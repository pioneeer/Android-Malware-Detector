package com.example.swssm.amd2016;

import com.example.swssm.amd2016.database.DbOpenHelper;

import java.util.HashMap;

/**
 * Created by jinheon Kim on 2016-02-21.
 */
public class initSyscallHM {
    private DbOpenHelper mDbOpenHelper;
    public static HashMap<String, Double> setHashMap(HashMap<String, Double> map){

        map.put("access", 0.0);
        map.put("brk", 0.0);
        map.put("capset", 0.0);
        map.put("chmod", 0.0);
        map.put("clock_gettime", 0.0);
        map.put("clone", 0.0);
        map.put("close", 0.0);
        map.put("dup", 0.0);
        map.put("epoll_create", 0.0);
        map.put("epoll_ctl", 0.0);
        map.put("epoll_wait", 0.0);
        map.put("execve", 0.0);
        map.put("exit", 0.0);
        map.put("exit_group", 0.0);
        map.put("fcntl64", 0.0);
        map.put("flock", 0.0);
        map.put("fork", 0.0);
        map.put("fdatasync", 0.0);
        map.put("fstat64", 0.0);
        map.put("fsync", 0.0);
        map.put("ftruncate", 0.0);
        map.put("futex", 0.0);
        map.put("getdents64", 0.0);
        map.put("getegid32", 0.0);
        map.put("geteuid32", 0.0);
        map.put("getgid32", 0.0);
        map.put("getpgid", 0.0);
        map.put("getpid", 0.0);
        map.put("getpriority", 0.0);
        map.put("getrlimit", 0.0);
        map.put("gettid", 0.0);
        map.put("gettimeofday", 0.0);
        map.put("getuid32", 0.0);
        map.put("ioctl", 0.0);
        map.put("kill", 0.0);
        map.put("lseek", 0.0);
        map.put("lstat64", 0.0);
        map.put("madvise", 0.0);
        map.put("mkdir", 0.0);
        map.put("mmap2", 0.0);
        map.put("mprotect", 0.0);
        map.put("munmap", 0.0);
        map.put("nanosleep", 0.0);
        map.put("open", 0.0);
        map.put("pipe", 0.0);
        map.put("poll", 0.0);
        map.put("pread", 0.0);
        map.put("read", 0.0);
        map.put("readlink", 0.0);
        map.put("rename", 0.0);
        map.put("restart_syscall", 0.0);
        map.put("rt_sigtimedwait", 0.0);
        map.put("sched_yield", 0.0);
        map.put("select", 0.0);
        map.put("setgid32", 0.0);
        map.put("setgroups32", 0.0);
        map.put("setpgid", 0.0);
        map.put("setpriority", 0.0);
        map.put("setrlimit", 0.0);
        map.put("setuid32", 0.0);
        map.put("sigaction", 0.0);
        map.put("sigprocmask", 0.0);
        map.put("sigreturn", 0.0);
        map.put("stat64", 0.0);
        map.put("SYS_281", 0.0);
        map.put("SYS_282", 0.0);
        map.put("SYS_283", 0.0);
        map.put("SYS_286", 0.0);
        map.put("SYS_290", 0.0);
        map.put("SYS_293", 0.0);
        map.put("SYS_294", 0.0);
        map.put("SYS_295", 0.0);
        map.put("SYS_296", 0.0);
        map.put("SYS_297", 0.0);
        map.put("syscall_983042", 0.0);
        map.put("syscall_983045", 0.0);
        map.put("unlink", 0.0);
        map.put("wait4", 0.0);
        map.put("write", 0.0);

        return map;
    }

    public static String getSyscallList(HashMap<String, Double> map){
        String list = "";

        int s = getSumOfSyscall(map);


        list += (map.get("access")/s) + "\t";
        list += (map.get("brk")/s) + "\t";
        list += (map.get("capset")/s) + "\t";
        list += (map.get("chmod")/s) + "\t";
        list += (map.get("clock_gettime")/s) + "\t";
        list += (map.get("clone")/s) + "\t";
        list += (map.get("close")/s) + "\t";
        list += (map.get("dup")/s) + "\t";
        list += (map.get("epoll_create")/s) + "\t";
        list += (map.get("epoll_ctl")/s) + "\t";
        list += (map.get("epoll_wait")/s) + "\t";
        list += (map.get("execve")/s) + "\t";
        list += (map.get("exit")/s) + "\t";
        list += (map.get("exit_group")/s) + "\t";
        list += (map.get("fcntl64")/s) + "\t";
        list += (map.get("flock")/s) + "\t";
        list += (map.get("fork")/s) + "\t";
        list += (map.get("fdatasync")/s) + "\t";
        list += (map.get("fstat64")/s) + "\t";
        list += (map.get("fsync")/s) + "\t";
        list += (map.get("ftruncate")/s) + "\t";
        list += (map.get("futex")/s) + "\t";
        list += (map.get("getdents64")/s) + "\t";
        list += (map.get("getegid32")/s) + "\t";
        list += (map.get("geteuid32")/s) + "\t";
        list += (map.get("getgid32")/s) + "\t";
        list += (map.get("getpgid")/s) + "\t";
        list += (map.get("getpid")/s) + "\t";
        list += (map.get("getpriority")/s) + "\t";
        list += (map.get("getrlimit")/s) + "\t";
        list += (map.get("gettid")/s) + "\t";
        list += (map.get("gettimeofday")/s) + "\t";
        list += (map.get("getuid32")/s) + "\t";
        list += (map.get("ioctl")/s) + "\t";
        list += (map.get("kill")/s) + "\t";
        list += (map.get("lseek")/s) + "\t";
        list += (map.get("lstat64")/s) + "\t";
        list += (map.get("madvise")/s) + "\t";
        list += (map.get("mkdir")/s) + "\t";
        list += (map.get("mmap2")/s) + "\t";
        list += (map.get("mprotect")/s) + "\t";
        list += (map.get("munmap")/s) + "\t";
        list += (map.get("nanosleep")/s) + "\t";
        list += (map.get("open")/s) + "\t";
        list += (map.get("pipe")/s) + "\t";
        list += (map.get("poll")/s) + "\t";
        list += (map.get("pread")/s) + "\t";
        list += (map.get("read")/s) + "\t";
        list += (map.get("readlink")/s) + "\t";
        list += (map.get("rename")/s) + "\t";
        list += (map.get("restart_syscall")/s) + "\t";
        list += (map.get("rt_sigtimedwait")/s) + "\t";
        list += (map.get("sched_yield")/s) + "\t";
        list += (map.get("select")/s) + "\t";
        list += (map.get("setgid32")/s) + "\t";
        list += (map.get("setgroups32")/s) + "\t";
        list += (map.get("setpgid")/s) + "\t";
        list += (map.get("setpriority")/s) + "\t";
        list += (map.get("setrlimit")/s) + "\t";
        list += (map.get("setuid32")/s) + "\t";
        list += (map.get("sigaction")/s) + "\t";
        list += (map.get("sigprocmask")/s) + "\t";
        list += (map.get("sigreturn")/s) + "\t";
        list += (map.get("stat64")/s) + "\t";
        list += (map.get("SYS_281")/s) + "\t";
        list += (map.get("SYS_282")/s) + "\t";
        list += (map.get("SYS_283")/s) + "\t";
        list += (map.get("SYS_286")/s) + "\t";
        list += (map.get("SYS_290")/s) + "\t";
        list += (map.get("SYS_293")/s) + "\t";
        list += (map.get("SYS_294")/s) + "\t";
        list += (map.get("SYS_295")/s) + "\t";
        list += (map.get("SYS_296")/s) + "\t";
        list += (map.get("SYS_297")/s) + "\t";
        list += (map.get("syscall_983042")/s) + "\t";
        list += (map.get("syscall_983045")/s) + "\t";
        list += (map.get("unlink")/s) + "\t";
        list += (map.get("wait4")/s) + "\t";
        list += (map.get("write")/s) + "\t";
        return list;
    }


    public static int getSumOfSyscall(HashMap<String, Double> map){
        int sum = 0;

        sum += map.get("access");
        sum += map.get("brk");
        sum += map.get("capset");
        sum += map.get("chmod");
        sum += map.get("clock_gettime");
        sum += map.get("clone");
        sum += map.get("close");
        sum += map.get("dup");
        sum += map.get("epoll_create");
        sum += map.get("epoll_ctl");
        sum += map.get("epoll_wait");
        sum += map.get("execve");
        sum += map.get("exit");
        sum += map.get("exit_group");
        sum += map.get("fcntl64");
        sum += map.get("flock");
        sum += map.get("fork");
        sum += map.get("fdatasync");
        sum += map.get("fstat64");
        sum += map.get("fsync");
        sum += map.get("ftruncate");
        sum += map.get("futex");
        sum += map.get("getdents64");
        sum += map.get("getegid32");
        sum += map.get("geteuid32");
        sum += map.get("getgid32");
        sum += map.get("getpgid");
        sum += map.get("getpid");
        sum += map.get("getpriority");
        sum += map.get("getrlimit");
        sum += map.get("gettid");
        sum += map.get("gettimeofday");
        sum += map.get("getuid32");
        sum += map.get("ioctl");
        sum += map.get("kill");
        sum += map.get("lseek");
        sum += map.get("lstat64");
        sum += map.get("madvise");
        sum += map.get("mkdir");
        sum += map.get("mmap2");
        sum += map.get("mprotect");
        sum += map.get("munmap");
        sum += map.get("nanosleep");
        sum += map.get("open");
        sum += map.get("pipe");
        sum += map.get("poll");
        sum += map.get("pread");
        sum += map.get("read");
        sum += map.get("readlink");
        sum += map.get("rename");
        sum += map.get("restart_syscall");
        sum += map.get("rt_sigtimedwait");
        sum += map.get("sched_yield");
        sum += map.get("select");
        sum += map.get("setgid32");
        sum += map.get("setgroups32");
        sum += map.get("setpgid");
        sum += map.get("setpriority");
        sum += map.get("setrlimit");
        sum += map.get("setuid32");
        sum += map.get("sigaction");
        sum += map.get("sigprocmask");
        sum += map.get("sigreturn");
        sum += map.get("stat64");
        sum += map.get("SYS_281");
        sum += map.get("SYS_282");
        sum += map.get("SYS_283");
        sum += map.get("SYS_286");
        sum += map.get("SYS_290");
        sum += map.get("SYS_293");
        sum += map.get("SYS_294");
        sum += map.get("SYS_295");
        sum += map.get("SYS_296");
        sum += map.get("SYS_297");
        sum += map.get("syscall_983042");
        sum += map.get("syscall_983045");
        sum += map.get("unlink");
        sum += map.get("wait4");
        sum += map.get("write");

        return sum;
    }

    public void setDb(HashMap<String, Double> map, String pkg_name, DbOpenHelper db, int sum) {
        mDbOpenHelper = db;
        mDbOpenHelper.updateColumnSyscall(pkg_name, map, sum);
    }
}
