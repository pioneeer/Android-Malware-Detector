package com.example.swssm.amd2016.PagerAdapter;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.drawable.Drawable;
import android.os.Parcelable;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ExpandableListView;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.Toast;

import com.example.swssm.amd2016.AlwaysOnTopService;
import com.example.swssm.amd2016.R;
import com.example.swssm.amd2016.appListView.BaseExpandableAdapter;
import com.example.swssm.amd2016.appSpinner.appListFiller;
import com.example.swssm.amd2016.appSpinner.appSpinerAdapter;
import com.example.swssm.amd2016.appSpinner.appSpinnerAppList;
import com.example.swssm.amd2016.database.DbOpenHelper;
import com.example.swssm.amd2016.initPermissions;
import com.example.swssm.amd2016.initSyscallHM;
import com.example.swssm.amd2016.wekaClassSys;
import com.github.mikephil.charting.charts.HorizontalBarChart;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.utils.ColorTemplate;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;

import static com.example.swssm.amd2016.permissionReader.getAppNameByPID;

/**
 * Created by jinheon Kim on 2016-01-22.
 */
public class PagerAdapterManager extends android.support.v4.view.PagerAdapter {

    private static final String TAG = "PagerAdapterManager";
    private static boolean trigBtThread = false;
    private static HashMap<String, Double> syscallMap;
    private static String selectedAppPkgName = "";
    private LayoutInflater mInflater;
    private Context mContext;
    private int selectAppPid;
    private String straceOutput = "";
    private DbOpenHelper mDbOpenHelper;
    private String syscallList = "";
    private initPermissions initP;

    private appPagers pager1;
    private ArrayList<NumberThread> th;
    private ArrayList<String> mGroupList = null;
    private ArrayList<Drawable> mGroupIcon = null;
    private ArrayList<ArrayList<String>> mChildList = null;
    private ArrayList<String> mChildListP = null;
    private ArrayList<String> mChildListP1 = null;
    private ArrayList<String> mChildListP2 = null;
    private ExpandableListView mListView;
    private ListView lv_appsList1;
    private initSyscallHM initSysCall;
    private appListFiller appFiller;
    private ArrayList<appSpinnerAppList> spinnerAppList;
    private HorizontalBarChart mChart;

    private wekaClassSys wcSC;
    private static boolean threadCreate = false;
    private static boolean threadFirstStart = true;

    public PagerAdapterManager(Context c, DbOpenHelper mDb) {
        super();
        mInflater = LayoutInflater.from(c);
        mContext = c;
        mDbOpenHelper = mDb;
        initP = new initPermissions(mContext, mDbOpenHelper);
        initP.setArrayList();
    }

    @Override
    public int getCount() {
        return 3;
    }

    @Override
    public Object instantiateItem(View pager, int position) {
        /*if(threadCreate == false) {
            mNumberThread = new NumberThread(true);
            threadCreate = true;
        }*/
        th = new ArrayList<NumberThread>();

        //그룹 뷰 아이콘, 패키지명
        mGroupList = new ArrayList<String>();
        mGroupIcon = new ArrayList<Drawable>();
        //차일드 뷰 퍼미션, 시스템콜
        mChildList = new ArrayList<ArrayList<String>>();
        mChildListP1 = new ArrayList<String>();
        mChildListP2 = new ArrayList<String>();
        mChildListP = new ArrayList<String>();
        //3페이지 필요 변수들
        appFiller = new appListFiller(mContext);

        View v = null;

        //첫 페이지
        if (position == 0) {
            v = mInflater.inflate(R.layout.inflate_one, null);
            lv_appsList1 = (ListView) v.findViewById(R.id.lv_appsList1);
            lv_appsList1.setOnItemClickListener(onItemClickLv);

            pager1 = new appPagers(mContext, lv_appsList1);
            pager1.setAppListView_1();
            v.findViewById(R.id.bt_thstart).setOnClickListener(onClicktv_tStart);
            v.findViewById(R.id.bt_thstop).setOnClickListener(onClicktv_tStop);
            v.findViewById(R.id.bt_root).setOnClickListener(onClickbt_root);
            v.findViewById(R.id.bt_wmOpen).setOnClickListener(onClickbt_wmOpen);
            v.findViewById(R.id.bt_wmClose).setOnClickListener(onClickbt_wmClose);
            v.findViewById(R.id.bt_appListRefresh).setOnClickListener(onClickbt_refresh);


        }
        //두번째 페이지
        else if (position == 1) {
            v = mInflater.inflate(R.layout.inflate_two, null);

            mGroupList = initP.getmGroupList();
            mGroupIcon = initP.getmGroupIcon();
            mChildListP1 = initP.getmChildListP1();
            mChildListP2 = initP.getmChildListP2();
            mChildListP = initP.getmChildListP();
            mChildList = initP.getmChildListPF();

            mListView = (ExpandableListView) v.findViewById(R.id.elv_list);
            mListView.setAdapter(new BaseExpandableAdapter(mContext, mGroupList, mGroupIcon, mChildList, mDbOpenHelper));

        //세번째 페이지
        } else if (position == 2) {
            v = mInflater.inflate(R.layout.inflate_three, null);
            mChart = (HorizontalBarChart) v.findViewById(R.id.chart);

            spinnerAppList = new ArrayList<appSpinnerAppList>();
            spinnerAppList = appFiller.getFilledAppList();
            appSpinerAdapter arrayAdapter = new appSpinerAdapter(mContext.getApplicationContext(), spinnerAppList);
            Spinner spinner = (Spinner) v.findViewById(R.id.spinner_app);
            spinner.setAdapter(arrayAdapter);
            spinner.setOnItemSelectedListener(onSelectSpinItem);


        }
        ((ViewPager) pager).addView(v, 0);
        return v;
    }



////////////////////////////////////////////////////////////////////////////////////////////////////
//FIRST PAGE
    @Override
    public void destroyItem(View pager, int position, Object view) {
        ((ViewPager) pager).removeView((View) view);
    }

    @Override
    public boolean isViewFromObject(View pager, Object obj) {
        return pager == obj;
    }

    @Override
    public void restoreState(Parcelable arg0, ClassLoader arg1) {
    }

    @Override
    public Parcelable saveState() {
        return null;
    }

    @Override
    public void startUpdate(View arg0) {
    }

    @Override
    public void finishUpdate(View arg0) {
    }

    // strace thread
    class NumberThread extends Thread {
        private Process exec;
        private boolean isPlay = false;

        String s;
        int a;
        BufferedReader br;

        public NumberThread(boolean isPlay) {
            this.isPlay = isPlay;
        }

        public void stopThread() {
            isPlay = false;
        }


        @Override
        public void run() {
            super.run();
            Log.e("thread running~~1", "thread running~~1");
            //while (isPlay) {
                try {
                    exec = Runtime.getRuntime().exec("strace -p " + selectAppPid);
                    InputStreamReader is = new InputStreamReader(exec.getErrorStream());
                    Log.e("thread running~~2", "thread running~~2");
                    br = new BufferedReader(is);
                    while ((s = br.readLine()) != null && isPlay) {
                        if (s.indexOf('(') >= 1) {

                            a = s.indexOf('(');

                            try {
                                syscallMap.put(s.substring(0, a), syscallMap.get(s.substring(0, a)) + 1);
                            } catch (Exception e) {
                                Log.e(TAG, " hashmap dont put " + e.getMessage());
                            }
                        }
                        Log.i(TAG, " strace output " + s);
                    }
                    is.close();
                } catch (Exception e) {
                }
            //}
            /*if(isPlay == false){
                try{
                    exec.destroy();
                    Log.i("exec destroy!", "exec destroy!");
                }catch(Exception e){
                    Log.i("exec destroy failed", "exec destroy failed");
                }
            }*/

        }
    }
    private View.OnClickListener onClicktv_tStart = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if(selectedAppPkgName == ""){
                Toast.makeText(mContext, "Please to select app", Toast.LENGTH_SHORT).show();
            }else {
                if (trigBtThread == false) {
                    trigBtThread = true;

                    initSysCall = new initSyscallHM();
                    syscallMap = new HashMap<String, Double>();
                    syscallMap = initSyscallHM.setHashMap(syscallMap);
                    syscallList = "";

                    Toast.makeText(mContext, "Thread Start", Toast.LENGTH_SHORT).show();

                    NumberThread mNumberThread = new NumberThread(true);
                    th.add(mNumberThread);
                    mNumberThread.start();
                    /*if(threadFirstStart == true) {
                        threadFirstStart = false;
                        mNumberThread.start();
                    }else{
                        mNumberThread.startThread();
                    }*/
                } else {
                    Toast.makeText(mContext, "Thread has already been started.", Toast.LENGTH_SHORT).show();
                }
            }
        }
    };
    private View.OnClickListener onClicktv_tStop = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (trigBtThread == true) {
                trigBtThread = false;

                try {
                    th.get(0).stopThread();
                    th.remove(0);
                    Log.e(TAG, " stop thread ");
                    Toast.makeText(mContext, "stop thread", Toast.LENGTH_SHORT).show();
                } catch (Exception e) {
                    Log.e(TAG, " thread can't stop " + e.getMessage());
                }



                int sumOfSyscall = initSyscallHM.getSumOfSyscall(syscallMap);
                syscallList = initSyscallHM.getSyscallList(syscallMap);



                Cursor c = mDbOpenHelper.getMatchName(selectedAppPkgName);
                c.moveToFirst();
                String permiss = c.getString(1);
                permiss += "\t\t";

                try {
                    initSysCall.setDb(syscallMap, selectedAppPkgName, mDbOpenHelper, sumOfSyscall);
                }catch(Exception e){

                }

                syscallList += "\t" + selectedAppPkgName + "\n";


                wcSC = new wekaClassSys(mContext, mDbOpenHelper, syscallMap, sumOfSyscall, selectedAppPkgName);
                try {
                    wcSC.executeWekaTutorial();
                } catch (Exception e) {
                    Log.i("weka loading failed ", "weka loading failed " + e.getMessage());
                }

                AlertDialog al = new AlertDialog.Builder(mContext).create();
                al.setTitle(selectedAppPkgName);

                al.setMessage("SVM Result : " + wcSC.getResultWekaSVM() + "\n" +
                              "J48 Result : " + wcSC.getResultWekaJ48());
                al.setButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                    }
                });
                al.show();
            } else {
                Toast.makeText(mContext, "Please start a thread", Toast.LENGTH_SHORT).show();
            }
        }
    };
    // 루트 버튼 활성화
    private View.OnClickListener onClickbt_root = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            try {
                Runtime runtime = Runtime.getRuntime();
                runtime.exec("su");
                Toast.makeText(mContext, "Please wait", Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                Log.e(TAG, "Unable to execute top command");
            }
        }
    };
    // 윈도우매니저 오픈
    private View.OnClickListener onClickbt_wmOpen = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            mContext.startService(new Intent(mContext, AlwaysOnTopService.class));
        }
    };
    // 윈도우매니저 스탑
    private View.OnClickListener onClickbt_wmClose = new View.OnClickListener() {
        public void onClick(View v) {
            mContext.stopService(new Intent(mContext, AlwaysOnTopService.class));
        }
    };
    //앱 리프레쉬 버튼
    private View.OnClickListener onClickbt_refresh = new View.OnClickListener() {
        public void onClick(View v) {
            pager1 = new appPagers(mContext, lv_appsList1);
            pager1.setAppListView_1();
        }
    };
    //리스트 뷰 아이템 클릭 리스너
    private AdapterView.OnItemClickListener onItemClickLv = new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
            if(trigBtThread == false) {
                ListView listView = (ListView) parent;
                String item = (String) listView.getItemAtPosition(position);
                selectAppPid = Integer.parseInt(item);
                selectedAppPkgName = getAppNameByPID(mContext, selectAppPid);
                Toast.makeText(mContext, item + " " + selectedAppPkgName, Toast.LENGTH_SHORT).show();
            }else{
                Toast.makeText(mContext, "The thread is already in working.", Toast.LENGTH_SHORT).show();
            }
        }
    };


////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
//SECOND PAGE
//첫 번째 페이지의 listview 어댑터로 대신함.
////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////
//THIRD PAGE
    private AdapterView.OnItemSelectedListener onSelectSpinItem = new AdapterView.OnItemSelectedListener() {
        @Override
        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
            Spinner spin = (Spinner) parent;
            String setItem = (String) spin.getSelectedItem().toString();


            ArrayList<BarDataSet> getData;
            getData = getDataSet(setItem);
            BarData data = new BarData(getXAxisValues(), getData);

            mChart.setMaxVisibleValueCount(60);
            mChart.setData(data);
            mChart.setDescription("");
            mChart.animateXY(2000, 2000);
            mChart.invalidate();


            //Toast.makeText(mContext, setItem, Toast.LENGTH_LONG).show();
        }

        @Override
        public void onNothingSelected(AdapterView<?> parent) {

        }
    };
    private ArrayList<BarDataSet> getDataSet(String pkg_name) {
        ArrayList<BarDataSet> dataSets = null;

        Cursor c = mDbOpenHelper.getMatchName(pkg_name);
        c.moveToFirst();

        ArrayList<BarEntry> valueSet1 = new ArrayList<>();

        BarEntry s = new BarEntry(c.getFloat(4), 0);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(5), 1);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(6), 2);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(7), 3);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(8), 4);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(9), 5);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(10), 6);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(11), 7);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(12), 8);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(13), 9);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(14), 10);
        valueSet1.add(s);//83
        s = new BarEntry(c.getFloat(15), 11);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(16), 12);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(17), 13);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(18), 14);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(19), 15);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(20), 16);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(21), 17);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(22), 18);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(23), 19);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(24), 20);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(25), 21);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(26), 22);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(27), 23);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(28), 24);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(29), 25);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(30), 26);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(31), 27);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(32), 28);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(33), 29);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(34), 30);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(35), 31);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(36), 32);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(37), 33);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(38), 34);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(39), 35);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(40), 36);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(41), 37);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(42), 38);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(43), 39);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(44), 40);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(45), 41);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(46), 42);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(47), 43);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(48), 44);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(49), 45);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(50), 46);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(51), 47);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(52), 48);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(53), 49);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(54), 50);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(55), 51);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(56), 52);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(57), 53);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(58), 54);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(59), 55);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(60), 56);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(61), 57);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(62), 58);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(63), 59);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(64), 60);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(65), 61);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(66), 62);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(67), 63);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(68), 64);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(69), 65);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(70), 66);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(71), 67);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(72), 68);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(73), 69);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(74), 70);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(75), 71);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(76), 72);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(77), 73);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(78), 74);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(79), 75);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(80), 76);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(81), 77);
        valueSet1.add(s);
        s = new BarEntry(c.getFloat(82), 78);
        valueSet1.add(s);


        BarDataSet barDataSet1 = new BarDataSet(valueSet1, "Using the total system calls");
        barDataSet1.setColors(ColorTemplate.COLORFUL_COLORS);

        dataSets = new ArrayList<>();
        dataSets.add(barDataSet1);

        return dataSets;
    }


    private ArrayList<String> getXAxisValues() {
        ArrayList<String> xAxis = new ArrayList<>();
        xAxis.add("ACCESS");
        xAxis.add("BRK");
        xAxis.add("CAPSET");
        xAxis.add("CHMOD");
        xAxis.add("CLOCK_GETTIME");
        xAxis.add("CLONE");
        xAxis.add("CLOSE");
        xAxis.add("DUP");
        xAxis.add("EPOLL_CREATE");
        xAxis.add("EPOLL_CTL");
        xAxis.add("EPOLL_WAIT");
        xAxis.add("EXECVE");
        xAxis.add("EXIT");
        xAxis.add("EXIT_GROUP");
        xAxis.add("FCNTL64");
        xAxis.add("FLOCK");
        xAxis.add("FORK");
        xAxis.add("FDATASYNC");
        xAxis.add("FSTAT64");
        xAxis.add("FSYNC");
        xAxis.add("FTRUNCATE");
        xAxis.add("FUTEX");
        xAxis.add("GETDENTS64");
        xAxis.add("GETEGID32");
        xAxis.add("GETEUID32");
        xAxis.add("GETGID32");
        xAxis.add("GETPGID");
        xAxis.add("GETPID");
        xAxis.add("GETPRIORITY");
        xAxis.add("GETRLIMIT");
        xAxis.add("GETTID");
        xAxis.add("GETTIMEOFDAY");
        xAxis.add("GETUID32");
        xAxis.add("IOCTL");
        xAxis.add("KILL");
        xAxis.add("LSEEK");
        xAxis.add("LSTAT64");
        xAxis.add("MADVISE");
        xAxis.add("MKDIR");
        xAxis.add("MMAP2");
        xAxis.add("MPROTECT");
        xAxis.add("MUNMAP");
        xAxis.add("NANOSLEEP");
        xAxis.add("OPEN");
        xAxis.add("PIPE");
        xAxis.add("POLL");
        xAxis.add("PREAD");
        xAxis.add("READ");
        xAxis.add("READLINK");
        xAxis.add("RENAME");
        xAxis.add("RESTART_SYSCALL");
        xAxis.add("RT_SIGTIMEDWAIT");
        xAxis.add("SCHED_YIELD");
        xAxis.add("S_SELECT");
        xAxis.add("SETGID32");
        xAxis.add("SETGROUPS32");
        xAxis.add("SETPGID");
        xAxis.add("SETPRIORITY");
        xAxis.add("SETRLIMIT");
        xAxis.add("SETUID32");
        xAxis.add("SIGACTION");
        xAxis.add("SIGPROCMASK");
        xAxis.add("SIGRETURN");
        xAxis.add("STAT64");
        xAxis.add("SYS_281");
        xAxis.add("SYS_282");
        xAxis.add("SYS_283");
        xAxis.add("SYS_286");
        xAxis.add("SYS_290");
        xAxis.add("SYS_293");
        xAxis.add("SYS_294");
        xAxis.add("SYS_295");
        xAxis.add("SYS_296");
        xAxis.add("SYS_297");
        xAxis.add("SYSCALL_983042");
        xAxis.add("SYSCALL_983045");
        xAxis.add("UNLINK");
        xAxis.add("WAIT4");
        xAxis.add("WTIRE");

        return xAxis;
    }
////////////////////////////////////////////////////////////////////////////////////////////////////

}


