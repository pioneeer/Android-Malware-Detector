package com.example.swssm.amd2016;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;

import com.example.swssm.amd2016.database.DbOpenHelper;

import java.util.HashMap;
import java.util.List;

import weka.classifiers.Classifier;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SerializationHelper;

import static com.example.swssm.amd2016.permissionReader.hasPermission;

/**
 * Created by jinheon Kim on 2016-02-28.
 */
public class wekaClassSys {

    private String path = "/sdcard/svmmodel/";
    private DbOpenHelper mDbOpenHelper;
    private List<ApplicationInfo> packages;
    private initPermissions ip;
    private PackageManager pm;
    private String permissions;
    private Context mContext;
    private HashMap<String, Double> systemCallHM;
    private int sumOfSC;
    private String pkg_name;
    private String result1;
    private String result2;

    public wekaClassSys(Context c, DbOpenHelper mdb, HashMap<String, Double> sc, int sum, String name){
        mContext = c;
        mDbOpenHelper = mdb;
        mDbOpenHelper.open();
        systemCallHM = sc;
        sumOfSC = sum;
        pkg_name = name;
    }

    public void executeWekaTutorial() throws Exception {


        ip = new initPermissions(mContext, mDbOpenHelper);

        pm = mContext.getPackageManager();
        permissions = setPermissions();

        Classifier clsS = null;
        try{
            clsS = (Classifier) SerializationHelper.read(path + "model.model");
        }catch(Exception e){
            e.printStackTrace();
        }



        FastVector allAttributes = createAttributes();
        Instances learningDataset1 = createLearningDataSet(allAttributes);


        double ss1 = clsS.classifyInstance(learningDataset1.instance(0));

        String prediction1 = learningDataset1.classAttribute().value((int)ss1);

        result1 = prediction1;
        if(prediction1 == "y"){
            mDbOpenHelper.updateColumnMalrisk(pkg_name, 3);
        }

        String pm = permissions;

        if(Character.getNumericValue(pm.charAt(10)) <= 0){
            if(Character.getNumericValue(pm.charAt(36)) <= 0){
                if(Character.getNumericValue(pm.charAt(30)) <= 0){
                    if(systemCallHM.get("nanosleep")/sumOfSC <= 0.00019){
                        result2 = "y";
                        mDbOpenHelper.updateColumnMalrisk(pkg_name, 3);
                    }
                    else result2 = "n";
                }else result2 = "n";
            }else{
                if(systemCallHM.get("write")/sumOfSC <= 0.001034){
                    if(systemCallHM.get("epoll_ctl")/sumOfSC <= 0.000047) result2 = "n";
                    else{
                        result2 = "y";
                        mDbOpenHelper.updateColumnMalrisk(pkg_name, 3);
                    }
                }else{
                    result2 = "y";
                    mDbOpenHelper.updateColumnMalrisk(pkg_name, 3);
                }
            }
        }else{
            if(Character.getNumericValue(pm.charAt(22)) <= 0){
                if(Character.getNumericValue(pm.charAt(34)) <= 0){
                    result2 = "y";
                    mDbOpenHelper.updateColumnMalrisk(pkg_name, 3);
                }
                else result2 = "n";
            }else{
                result2 = "y";
                mDbOpenHelper.updateColumnMalrisk(pkg_name, 3);
            }
        }
    }

    public String getResultWekaSVM(){
        return result1;
    }
    public String getResultWekaJ48(){
        return result2;
    }


    private FastVector createAttributes() {

        Attribute a = new Attribute("a");        Attribute b = new Attribute("b");        Attribute c = new Attribute("c");        Attribute d = new Attribute("d");
        Attribute e = new Attribute("e");        Attribute f = new Attribute("f");        Attribute g = new Attribute("g");        Attribute h = new Attribute("h");
        Attribute i = new Attribute("i");        Attribute j = new Attribute("j");        Attribute k = new Attribute("k");        Attribute l = new Attribute("l");
        Attribute m = new Attribute("m");        Attribute n = new Attribute("n");        Attribute o = new Attribute("o");        Attribute p = new Attribute("p");
        Attribute q = new Attribute("q");        Attribute r = new Attribute("r");        Attribute s = new Attribute("s");        Attribute t = new Attribute("t");
        Attribute u = new Attribute("u");        Attribute v = new Attribute("v");
        ///////////////////////////////////////////////////////////////////////////
        Attribute s1 = new Attribute("s1");
        Attribute s2 = new Attribute("s2");
        Attribute s3 = new Attribute("s3");
        Attribute s4 = new Attribute("s4");
        Attribute s5 = new Attribute("s5");
        Attribute s6 = new Attribute("s6");
        Attribute s7 = new Attribute("s7");
        Attribute s8 = new Attribute("s8");
        Attribute s9 = new Attribute("s9");
        Attribute s10 = new Attribute("s10");
        Attribute s11 = new Attribute("s11");
        Attribute s12 = new Attribute("s12");
        Attribute s13 = new Attribute("s13");
        Attribute s14 = new Attribute("s14");
        Attribute s15 = new Attribute("s15");
        Attribute s16 = new Attribute("s16");
        Attribute s17 = new Attribute("s17");
        Attribute s18 = new Attribute("s18");
        Attribute s19 = new Attribute("s19");
        Attribute s20 = new Attribute("s20");
        Attribute s21 = new Attribute("s21");
        Attribute s22 = new Attribute("s22");
        Attribute s23 = new Attribute("s23");
        Attribute s24 = new Attribute("s24");
        Attribute s25 = new Attribute("s25");
        Attribute s26 = new Attribute("s26");
        Attribute s27 = new Attribute("s27");
        Attribute s28 = new Attribute("s28");
        Attribute s29 = new Attribute("s29");
        Attribute s30 = new Attribute("s30");
        Attribute s31 = new Attribute("s31");
        Attribute s32 = new Attribute("s32");
        Attribute s33 = new Attribute("s33");
        Attribute s34 = new Attribute("s34");
        Attribute s35 = new Attribute("s35");
        Attribute s36 = new Attribute("s36");
        Attribute s37 = new Attribute("s37");
        Attribute s38 = new Attribute("s38");
        Attribute s39 = new Attribute("s39");
        Attribute s40 = new Attribute("s40");
        Attribute s41 = new Attribute("s41");
        Attribute s42 = new Attribute("s42");
        Attribute s43 = new Attribute("s43");
        Attribute s44 = new Attribute("s44");
        Attribute s45 = new Attribute("s45");
        Attribute s46 = new Attribute("s46");
        Attribute s47 = new Attribute("s47");
        Attribute s48 = new Attribute("s48");
        Attribute s49 = new Attribute("s49");
        Attribute s50 = new Attribute("s50");
        Attribute s51 = new Attribute("s51");
        Attribute s52 = new Attribute("s52");
        Attribute s53 = new Attribute("s53");
        Attribute s54 = new Attribute("s54");
        Attribute s55 = new Attribute("s55");
        Attribute s56 = new Attribute("s56");
        Attribute s57 = new Attribute("s57");
        Attribute s58 = new Attribute("s58");
        Attribute s59 = new Attribute("s59");
        Attribute s60 = new Attribute("s60");
        Attribute s61 = new Attribute("s61");
        Attribute s62 = new Attribute("s62");
        Attribute s63 = new Attribute("s63");
        Attribute s64 = new Attribute("s64");
        Attribute s65 = new Attribute("s65");
        Attribute s66 = new Attribute("s66");
        Attribute s67 = new Attribute("s67");
        Attribute s68 = new Attribute("s68");
        Attribute s69 = new Attribute("s69");
        Attribute s70 = new Attribute("s70");
        Attribute s71 = new Attribute("s71");
        Attribute s72 = new Attribute("s72");
        Attribute s73 = new Attribute("s73");
        Attribute s74 = new Attribute("s74");
        Attribute s75 = new Attribute("s75");
        Attribute s76 = new Attribute("s76");
        Attribute s77 = new Attribute("s77");
        Attribute s78 = new Attribute("s78");
        Attribute s79 = new Attribute("s79");


        FastVector clasV = new FastVector(2);

        clasV.addElement("n");
        clasV.addElement("y");
        clasV.addElement("");

        Attribute clas = new Attribute("malware", clasV);

        FastVector allAttributes = new FastVector(3);

        allAttributes.addElement(a);        allAttributes.addElement(b);        allAttributes.addElement(c);        allAttributes.addElement(d);
        allAttributes.addElement(e);        allAttributes.addElement(f);        allAttributes.addElement(g);        allAttributes.addElement(h);
        allAttributes.addElement(i);        allAttributes.addElement(j);        allAttributes.addElement(k);        allAttributes.addElement(l);
        allAttributes.addElement(m);        allAttributes.addElement(n);        allAttributes.addElement(o);        allAttributes.addElement(p);
        allAttributes.addElement(q);        allAttributes.addElement(r);        allAttributes.addElement(s);        allAttributes.addElement(t);
        allAttributes.addElement(u);        allAttributes.addElement(v);
        ///////////////////////////////////////////////////////////////////////////
        allAttributes.addElement(s1);
        allAttributes.addElement(s2);
        allAttributes.addElement(s3);
        allAttributes.addElement(s4);
        allAttributes.addElement(s5);
        allAttributes.addElement(s6);
        allAttributes.addElement(s7);
        allAttributes.addElement(s8);
        allAttributes.addElement(s9);
        allAttributes.addElement(s10);
        allAttributes.addElement(s11);
        allAttributes.addElement(s12);
        allAttributes.addElement(s13);
        allAttributes.addElement(s14);
        allAttributes.addElement(s15);
        allAttributes.addElement(s16);
        allAttributes.addElement(s17);
        allAttributes.addElement(s18);
        allAttributes.addElement(s19);
        allAttributes.addElement(s20);
        allAttributes.addElement(s21);
        allAttributes.addElement(s22);
        allAttributes.addElement(s23);
        allAttributes.addElement(s24);
        allAttributes.addElement(s25);
        allAttributes.addElement(s26);
        allAttributes.addElement(s27);
        allAttributes.addElement(s28);
        allAttributes.addElement(s29);
        allAttributes.addElement(s30);
        allAttributes.addElement(s31);
        allAttributes.addElement(s32);
        allAttributes.addElement(s33);
        allAttributes.addElement(s34);
        allAttributes.addElement(s35);
        allAttributes.addElement(s36);
        allAttributes.addElement(s37);
        allAttributes.addElement(s38);
        allAttributes.addElement(s39);
        allAttributes.addElement(s40);
        allAttributes.addElement(s41);
        allAttributes.addElement(s42);
        allAttributes.addElement(s43);
        allAttributes.addElement(s44);
        allAttributes.addElement(s45);
        allAttributes.addElement(s46);
        allAttributes.addElement(s47);
        allAttributes.addElement(s48);
        allAttributes.addElement(s49);
        allAttributes.addElement(s50);
        allAttributes.addElement(s51);
        allAttributes.addElement(s52);
        allAttributes.addElement(s53);
        allAttributes.addElement(s54);
        allAttributes.addElement(s55);
        allAttributes.addElement(s56);
        allAttributes.addElement(s57);
        allAttributes.addElement(s58);
        allAttributes.addElement(s59);
        allAttributes.addElement(s60);
        allAttributes.addElement(s61);
        allAttributes.addElement(s62);
        allAttributes.addElement(s63);
        allAttributes.addElement(s64);
        allAttributes.addElement(s65);
        allAttributes.addElement(s66);
        allAttributes.addElement(s67);
        allAttributes.addElement(s68);
        allAttributes.addElement(s69);
        allAttributes.addElement(s70);
        allAttributes.addElement(s71);
        allAttributes.addElement(s72);
        allAttributes.addElement(s73);
        allAttributes.addElement(s74);
        allAttributes.addElement(s75);
        allAttributes.addElement(s76);
        allAttributes.addElement(s77);
        allAttributes.addElement(s78);
        allAttributes.addElement(s79);

        allAttributes.addElement(clas);


        return allAttributes;
    }

    private Instances createLearningDataSet(FastVector allAttributes) throws Exception {

        Instances trainingDataSet =
                new Instances("wekaTutorial", allAttributes, 1);
        trainingDataSet.setClassIndex(101);
        String s = permissions;

            addInstance(trainingDataSet, Character.getNumericValue(s.charAt(0)),Character.getNumericValue(s.charAt(2)),
                    Character.getNumericValue(s.charAt(4)),Character.getNumericValue(s.charAt(6)),
                    Character.getNumericValue(s.charAt(8)),Character.getNumericValue(s.charAt(10)),
                    Character.getNumericValue(s.charAt(12)),Character.getNumericValue(s.charAt(14)),
                    Character.getNumericValue(s.charAt(16)),Character.getNumericValue(s.charAt(18)),
                    Character.getNumericValue(s.charAt(20)),Character.getNumericValue(s.charAt(22)),
                    Character.getNumericValue(s.charAt(24)),Character.getNumericValue(s.charAt(26)),
                    Character.getNumericValue(s.charAt(28)),Character.getNumericValue(s.charAt(30)),
                    Character.getNumericValue(s.charAt(32)),Character.getNumericValue(s.charAt(34)),
                    Character.getNumericValue(s.charAt(36)),Character.getNumericValue(s.charAt(38)),
                    Character.getNumericValue(s.charAt(40)),Character.getNumericValue(s.charAt(42)),
            systemCallHM.get("access")/sumOfSC,
            systemCallHM.get("brk")/sumOfSC,
            systemCallHM.get("capset")/sumOfSC,
            systemCallHM.get("chmod")/sumOfSC,
            systemCallHM.get("clock_gettime")/sumOfSC,
            systemCallHM.get("clone")/sumOfSC,
            systemCallHM.get("close")/sumOfSC,
            systemCallHM.get("dup")/sumOfSC,
            systemCallHM.get("epoll_create")/sumOfSC,
            systemCallHM.get("epoll_ctl")/sumOfSC,
            systemCallHM.get("epoll_wait")/sumOfSC,
            systemCallHM.get("execve")/sumOfSC,
            systemCallHM.get("exit")/sumOfSC,
            systemCallHM.get("exit_group")/sumOfSC,
            systemCallHM.get("fcntl64")/sumOfSC,
            systemCallHM.get("flock")/sumOfSC,
            systemCallHM.get("fork")/sumOfSC,
            systemCallHM.get("fdatasync")/sumOfSC,
            systemCallHM.get("fstat64")/sumOfSC,
            systemCallHM.get("fsync")/sumOfSC,
            systemCallHM.get("ftruncate")/sumOfSC,
            systemCallHM.get("futex")/sumOfSC,
            systemCallHM.get("getdents64")/sumOfSC,
            systemCallHM.get("getegid32")/sumOfSC,
            systemCallHM.get("geteuid32")/sumOfSC,
            systemCallHM.get("getgid32")/sumOfSC,
            systemCallHM.get("getpgid")/sumOfSC,
            systemCallHM.get("getpid")/sumOfSC,
            systemCallHM.get("getpriority")/sumOfSC,
            systemCallHM.get("getrlimit")/sumOfSC,
            systemCallHM.get("gettid")/sumOfSC,
            systemCallHM.get("gettimeofday")/sumOfSC,
            systemCallHM.get("getuid32")/sumOfSC,
            systemCallHM.get("ioctl")/sumOfSC,
            systemCallHM.get("kill")/sumOfSC,
            systemCallHM.get("lseek")/sumOfSC,
            systemCallHM.get("lstat64")/sumOfSC,
            systemCallHM.get("madvise")/sumOfSC,
            systemCallHM.get("mkdir")/sumOfSC,
            systemCallHM.get("mmap2")/sumOfSC,
            systemCallHM.get("mprotect")/sumOfSC,
            systemCallHM.get("munmap")/sumOfSC,
            systemCallHM.get("nanosleep")/sumOfSC,
            systemCallHM.get("open")/sumOfSC,
            systemCallHM.get("pipe")/sumOfSC,
            systemCallHM.get("poll")/sumOfSC,
            systemCallHM.get("pread")/sumOfSC,
            systemCallHM.get("read")/sumOfSC,
            systemCallHM.get("readlink")/sumOfSC,
            systemCallHM.get("rename")/sumOfSC,
            systemCallHM.get("restart_syscall")/sumOfSC,
            systemCallHM.get("rt_sigtimedwait")/sumOfSC,
            systemCallHM.get("sched_yield")/sumOfSC,
            systemCallHM.get("select")/sumOfSC,
            systemCallHM.get("setgid32")/sumOfSC,
            systemCallHM.get("setgroups32")/sumOfSC,
            systemCallHM.get("setpgid")/sumOfSC,
            systemCallHM.get("setpriority")/sumOfSC,
            systemCallHM.get("setrlimit")/sumOfSC,
            systemCallHM.get("setuid32")/sumOfSC,
            systemCallHM.get("sigaction")/sumOfSC,
            systemCallHM.get("sigprocmask")/sumOfSC,
            systemCallHM.get("sigreturn")/sumOfSC,
            systemCallHM.get("stat64")/sumOfSC,
            systemCallHM.get("SYS_281")/sumOfSC,
            systemCallHM.get("SYS_282")/sumOfSC,
            systemCallHM.get("SYS_283")/sumOfSC,
            systemCallHM.get("SYS_286")/sumOfSC,
            systemCallHM.get("SYS_290")/sumOfSC,
            systemCallHM.get("SYS_293")/sumOfSC,
            systemCallHM.get("SYS_294")/sumOfSC,
            systemCallHM.get("SYS_295")/sumOfSC,
            systemCallHM.get("SYS_296")/sumOfSC,
            systemCallHM.get("SYS_297")/sumOfSC,
            systemCallHM.get("syscall_983042")/sumOfSC,
            systemCallHM.get("syscall_983045")/sumOfSC,
            systemCallHM.get("unlink")/sumOfSC,
            systemCallHM.get("wait4")/sumOfSC,
            systemCallHM.get("write")/sumOfSC, "");


        return trainingDataSet;
    }

    private void addInstance(Instances trainingDataSet,
                             int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k,
                             int l, int m, int n, int o, int p, int q, int r, int s, int t, int u, int v,
                         Double s1, Double s2,  Double s3,   Double s4,    Double s5, Double s6,  Double s7,   Double s8,
                         Double s9, Double s10,  Double s11,   Double s12,    Double s13, Double s14,  Double s15,   Double s16,
                         Double s17, Double s18,  Double s19,   Double s20,    Double s21, Double s22,  Double s23,   Double s24,
                         Double s25, Double s26,  Double s27,   Double s28,    Double s29, Double s30,  Double s31,   Double s32,
                         Double s33, Double s34,  Double s35,   Double s36,    Double s37, Double s38,  Double s39,   Double s40,
                         Double s41, Double s42,  Double s43,   Double s44,    Double s45, Double s46,  Double s47,   Double s48,
                         Double s49, Double s50,  Double s51,   Double s52,    Double s53, Double s54,  Double s55,   Double s56,
                         Double s57, Double s58,  Double s59,   Double s60,    Double s61, Double s62,  Double s63,   Double s64,
                         Double s65, Double s66,  Double s67,   Double s68,    Double s69, Double s70,  Double s71,   Double s72,
                         Double s73, Double s74,  Double s75,   Double s76,    Double s77, Double s78,  Double s79,   String clas)
    {
        Instance instance = createInstance(trainingDataSet,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,
                s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,
                s22,s23,s24,s25,s26,s27,s28,s29,s30,s31,s32,s33,s34,s35,s36,s37,s38,s39,s40,
                s41,s42,s43,s44,s45,s46,s47,s48,s49,s50,s51,s52,s53,s54,s55,s56,s57,s58,s59,
                s60,s61,s62,s63,s64,s65,s66,s67,s68,s69,s70,s71,s72,s73,s74,s75,s76,s77,s78,s79,clas);
        trainingDataSet.add(instance);
    }

    private Instance createInstance(Instances associatedDataSet,
                                    int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k,
                                    int l, int m, int n, int o, int p, int q, int r, int s, int t, int u, int v,
                                    Double s1, Double s2,  Double s3,   Double s4,    Double s5, Double s6,  Double s7,   Double s8,
                                    Double s9, Double s10,  Double s11,   Double s12,    Double s13, Double s14,  Double s15,   Double s16,
                                    Double s17, Double s18,  Double s19,   Double s20,    Double s21, Double s22,  Double s23,   Double s24,
                                    Double s25, Double s26,  Double s27,   Double s28,    Double s29, Double s30,  Double s31,   Double s32,
                                    Double s33, Double s34,  Double s35,   Double s36,    Double s37, Double s38,  Double s39,   Double s40,
                                    Double s41, Double s42,  Double s43,   Double s44,    Double s45, Double s46,  Double s47,   Double s48,
                                    Double s49, Double s50,  Double s51,   Double s52,    Double s53, Double s54,  Double s55,   Double s56,
                                    Double s57, Double s58,  Double s59,   Double s60,    Double s61, Double s62,  Double s63,   Double s64,
                                    Double s65, Double s66,  Double s67,   Double s68,    Double s69, Double s70,  Double s71,   Double s72,
                                    Double s73, Double s74,  Double s75,   Double s76,    Double s77, Double s78,  Double s79,   String clas){
        // Create empty instance with three attribute values
        Instance instance = new DenseInstance(102);
        instance.setDataset(associatedDataSet);
        instance.setValue(0, a);        instance.setValue(1, b);        instance.setValue(2, c);        instance.setValue(3, d);
        instance.setValue(4, e);        instance.setValue(5, f);        instance.setValue(6, g);        instance.setValue(7, h);
        instance.setValue(8, i);        instance.setValue(9, j);        instance.setValue(10, k);        instance.setValue(11, l);
        instance.setValue(12, m);        instance.setValue(13, n);        instance.setValue(14, o);        instance.setValue(15, p);
        instance.setValue(16, q);        instance.setValue(17, r);        instance.setValue(18, s);        instance.setValue(19, t);
        instance.setValue(20, u);        instance.setValue(21, v);
        instance.setValue(22, s1);
        instance.setValue(23, s2);
        instance.setValue(24, s3);
        instance.setValue(25, s4);
        instance.setValue(26, s5);
        instance.setValue(27, s6);
        instance.setValue(28, s7);
        instance.setValue(29, s8);
        instance.setValue(30, s9);
        instance.setValue(31, s10);
        instance.setValue(32, s11);
        instance.setValue(33, s12);
        instance.setValue(34, s13);
        instance.setValue(35, s14);
        instance.setValue(36, s15);
        instance.setValue(37, s16);
        instance.setValue(38, s17);
        instance.setValue(39, s18);
        instance.setValue(40, s19);
        instance.setValue(41, s20);
        instance.setValue(42, s21);
        instance.setValue(43, s22);
        instance.setValue(44, s23);
        instance.setValue(45, s24);
        instance.setValue(46, s25);
        instance.setValue(47, s26);
        instance.setValue(48, s27);
        instance.setValue(49, s28);
        instance.setValue(50, s29);
        instance.setValue(51, s30);
        instance.setValue(52, s31);
        instance.setValue(53, s32);
        instance.setValue(54, s33);
        instance.setValue(55, s34);
        instance.setValue(56, s35);
        instance.setValue(57, s36);
        instance.setValue(58, s37);
        instance.setValue(59, s38);
        instance.setValue(60, s39);
        instance.setValue(61, s40);
        instance.setValue(62, s41);
        instance.setValue(63, s42);
        instance.setValue(64, s43);
        instance.setValue(65, s44);
        instance.setValue(66, s45);
        instance.setValue(67, s46);
        instance.setValue(68, s47);
        instance.setValue(69, s48);
        instance.setValue(70, s49);
        instance.setValue(71, s50);
        instance.setValue(72, s51);
        instance.setValue(73, s52);
        instance.setValue(74, s53);
        instance.setValue(75, s54);
        instance.setValue(76, s55);
        instance.setValue(77, s56);
        instance.setValue(78, s57);
        instance.setValue(79, s58);
        instance.setValue(80, s59);
        instance.setValue(81, s60);
        instance.setValue(82, s61);
        instance.setValue(83, s62);
        instance.setValue(84, s63);
        instance.setValue(85, s64);
        instance.setValue(86, s65);
        instance.setValue(87, s66);
        instance.setValue(88, s67);
        instance.setValue(89, s68);
        instance.setValue(90, s69);
        instance.setValue(91, s70);
        instance.setValue(92, s71);
        instance.setValue(93, s72);
        instance.setValue(94, s73);
        instance.setValue(95, s74);
        instance.setValue(96, s75);
        instance.setValue(97, s76);
        instance.setValue(98, s77);
        instance.setValue(99, s78);
        instance.setValue(100, s79);

        instance.setValue(101, clas);

        return instance;
    }



    private String setPermissions(){
        String boool = "";
        Intent intent = pm.getLaunchIntentForPackage(pkg_name);
        if (intent != null) {
            Boolean whether;

            whether = hasPermission(pkg_name, "android.permission.RESTART_PACKAGES", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.WRITE_APN_SETTINGS", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.WRITE_CONTACTS", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.CHANGE_WIFI_STATE", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.CALL_PHONE", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.WAKE_LOCK", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.ACCESS_FINE_LOCATION", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.READ_CONTACTS", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.ACCESS_COARSE_LOCATION", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.VIBRATE", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.RECEIVE_SMS", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.SEND_SMS", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.WRITE_SMS", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.RECEIVE_BOOT_COMPLETED", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.READ_SMS", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.ACCESS_WIFI_STATE", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.WRITE_EXTERNAL_STORAGE", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.ACCESS_NETWORK_STATE", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.READ_PHONE_STATE", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.INTERNET", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.ACCESS_FINE_LOCATION", pm);
            boool += (whether) ? 1:0; boool += "\t";

            whether = hasPermission(pkg_name, "android.permission.INSTALL_PACKAGES", pm);
            boool += (whether) ? 1:0; boool += "\t";

        }
        return boool;
    }
}

