package com.example.swssm.amd2016;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;

import com.example.swssm.amd2016.database.DbOpenHelper;

import java.util.ArrayList;
import java.util.List;

import weka.classifiers.Classifier;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;

import static com.example.swssm.amd2016.permissionReader.hasPermission;

/**
 * Created by jinheon Kim on 2016-02-28.
 */
public class wekaClassPer {

    private String path = "/sdcard/svmmodel/";
    private DbOpenHelper mDbOpenHelper;
    private List<ApplicationInfo> packages;
    private initPermissions ip;
    private PackageManager pm;
    private int sumOfApps = 0;
    private ArrayList<String> permissions;
    private Context mContext;

    public wekaClassPer(Context c, DbOpenHelper mdb){
        mContext = c;
        mDbOpenHelper = mdb;
        mDbOpenHelper.open();
    }

    public void executeWekaTutorial() throws Exception {
        permissions = new ArrayList<String>();


        ip = new initPermissions(mContext, mDbOpenHelper);
        packages = ip.getPermissionList();

        pm = ip.getPM();
        setPermissions(permissions);
        sumOfApps = permissions.size();
        Classifier clsP = null;
        try{
            clsP = (Classifier)weka.core.SerializationHelper.read(path + "per_svm.model");
        }catch(Exception e){
            e.printStackTrace();
        }


        FastVector allAttributes = createAttributes();
        Instances learningDataset = createLearningDataSet(allAttributes);




        int i=0;
        for (ApplicationInfo packageInfo : packages) {
            Intent intent = pm.getLaunchIntentForPackage(packageInfo.packageName);
            if (intent != null) {
                try {
                    double ss = clsP.classifyInstance(learningDataset.instance(i));
                    String prediction = learningDataset.classAttribute().value((int)ss);

                    Cursor c = mDbOpenHelper.getMatchName(packageInfo.packageName);
                    c.moveToFirst();
                    int s = c.getInt(3);
                    if(prediction == "y"){
                        if(s == 2) mDbOpenHelper.updateColumnMalrisk(packageInfo.packageName, 1);

                    }
                }catch(Exception e){
                }
                i++;
            }
        }
    }



    private FastVector createAttributes() {

        Attribute a = new Attribute("a");
        Attribute b = new Attribute("b");
        Attribute c = new Attribute("c");
        Attribute d = new Attribute("d");
        Attribute e = new Attribute("e");
        Attribute f = new Attribute("f");
        Attribute g = new Attribute("g");
        Attribute h = new Attribute("h");
        Attribute i = new Attribute("i");
        Attribute j = new Attribute("j");
        Attribute k = new Attribute("k");
        Attribute l = new Attribute("l");
        Attribute m = new Attribute("m");
        Attribute n = new Attribute("n");
        Attribute o = new Attribute("o");
        Attribute p = new Attribute("p");
        Attribute q = new Attribute("q");
        Attribute r = new Attribute("r");
        Attribute s = new Attribute("s");
        Attribute t = new Attribute("t");
        Attribute u = new Attribute("u");
        Attribute v = new Attribute("v");

        FastVector clasV = new FastVector(2);

        clasV.addElement("y");
        clasV.addElement("n");
        clasV.addElement("");
        Attribute clas = new Attribute("malware", clasV);

        FastVector allAttributes = new FastVector(3);
        allAttributes.addElement(a);
        allAttributes.addElement(b);
        allAttributes.addElement(c);
        allAttributes.addElement(d);
        allAttributes.addElement(e);
        allAttributes.addElement(f);
        allAttributes.addElement(g);
        allAttributes.addElement(h);
        allAttributes.addElement(i);
        allAttributes.addElement(j);
        allAttributes.addElement(k);
        allAttributes.addElement(l);
        allAttributes.addElement(m);
        allAttributes.addElement(n);
        allAttributes.addElement(o);
        allAttributes.addElement(p);
        allAttributes.addElement(q);
        allAttributes.addElement(r);
        allAttributes.addElement(s);
        allAttributes.addElement(t);
        allAttributes.addElement(u);
        allAttributes.addElement(v);

        allAttributes.addElement(clas);
        return allAttributes;
    }

    private Instances createLearningDataSet(FastVector allAttributes) throws Exception {

        Instances trainingDataSet =
                new Instances("wekaTutorial", allAttributes, sumOfApps);
        trainingDataSet.setClassIndex(22);
        String s = "";
        for (int j = 0; j < sumOfApps; j++) {

            s = permissions.get(j);

            addInstance(trainingDataSet, Character.getNumericValue(s.charAt(0)),Character.getNumericValue(s.charAt(2)),
                    Character.getNumericValue(s.charAt(4)),Character.getNumericValue(s.charAt(6)),
                    Character.getNumericValue(s.charAt(8)),Character.getNumericValue(s.charAt(10)),
                    Character.getNumericValue(s.charAt(12)),Character.getNumericValue(s.charAt(14)),
                    Character.getNumericValue(s.charAt(16)),Character.getNumericValue(s.charAt(18)),
                    Character.getNumericValue(s.charAt(20)),Character.getNumericValue(s.charAt(22)),
                    Character.getNumericValue(s.charAt(24)),Character.getNumericValue(s.charAt(26)),
                    Character.getNumericValue(s.charAt(28)),Character.getNumericValue(s.charAt(30)),
                    Character.getNumericValue(s.charAt(32)),Character.getNumericValue(s.charAt(34)),
                    Character.getNumericValue(s.charAt(36)),Character.getNumericValue(s.charAt(38)),
                    Character.getNumericValue(s.charAt(40)),Character.getNumericValue(s.charAt(42)), "");
        }


        return trainingDataSet;
    }

    private void addInstance(Instances trainingDataSet,
                             int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k,
                             int l, int m, int n, int o, int p, int q, int r, int s, int t, int u, int v,
                             String clas)
    {
        Instance instance = createInstance(trainingDataSet,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,clas);
        trainingDataSet.add(instance);
    }

    private Instance createInstance(Instances associatedDataSet,
                                    int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k,
                                    int l, int m, int n, int o, int p, int q, int r, int s, int t, int u, int v,
                                    String clas){
        Instance instance = new DenseInstance(23);
        instance.setDataset(associatedDataSet);
        instance.setValue(0, a);
        instance.setValue(1, b);
        instance.setValue(2, c);
        instance.setValue(3, d);
        instance.setValue(4, e);
        instance.setValue(5, f);
        instance.setValue(6, g);
        instance.setValue(7, h);
        instance.setValue(8, i);
        instance.setValue(9, j);
        instance.setValue(10, k);
        instance.setValue(11, l);
        instance.setValue(12, m);
        instance.setValue(13, n);
        instance.setValue(14, o);
        instance.setValue(15, p);
        instance.setValue(16, q);
        instance.setValue(17, r);
        instance.setValue(18, s);
        instance.setValue(19, t);
        instance.setValue(20, u);
        instance.setValue(21, v);

        instance.setValue(22, clas);

        return instance;
    }



    private void setPermissions(ArrayList<String> ps){
        for (ApplicationInfo packageInfo : packages) {
            String boool = "";
            Intent intent = pm.getLaunchIntentForPackage(packageInfo.packageName);
            if (intent != null) {
                Boolean whether;

                whether = hasPermission(packageInfo.packageName, "android.permission.RESTART_PACKAGES", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WRITE_APN_SETTINGS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WRITE_CONTACTS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.CHANGE_WIFI_STATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.CALL_PHONE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WAKE_LOCK", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_FINE_LOCATION", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.READ_CONTACTS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_COARSE_LOCATION", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.VIBRATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.RECEIVE_SMS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.SEND_SMS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WRITE_SMS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.RECEIVE_BOOT_COMPLETED", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.READ_SMS", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_WIFI_STATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.WRITE_EXTERNAL_STORAGE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_NETWORK_STATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.READ_PHONE_STATE", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.INTERNET", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.ACCESS_FINE_LOCATION", pm);
                boool += (whether) ? 1:0; boool += "\t";

                whether = hasPermission(packageInfo.packageName, "android.permission.INSTALL_PACKAGES", pm);
                boool += (whether) ? 1:0; boool += "\t";
                if(boool != "") ps.add(boool);

            }

        }

    }
}

